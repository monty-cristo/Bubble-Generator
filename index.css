/* My preferred way of handling box sizing but the default one is also just as good */
/* https://web.dev/learn/css/box-model/ */
*,
*::before,
*::after {
  box-sizing: border-box;
}

body,
h1,
ul {
  margin: 0;
}

ul {
  padding: 0;
  list-style: none;
}

button {
  padding: 0;
  background: none;
  border: none;
  border-radius: 5px;
}

body {
  min-height: 100vh;
  cursor: crosshair;
  /* Fallback color if the next one doesn't work */
  background: rgb(255, 236, 253);
  /* Most monitors can actually display more vibrant colors these days than a couple of years ago */
  /* But if we use rgb, hex codes, etc... we're still telling the browser to display the old muddy colors */
  /* https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/ */
  background: lch(100% 30 50);
  user-select: none;
  overflow: hidden;
  display: grid;
  /* Shorthand for align-content and justify-content */
  place-content: center;
  grid-template: 1fr / 1fr;
}

/* Yeah I'm a grid abuser, got a problem with that? */
/* This basically stacks all of the sections on top of each other thanks to this code and grid code above in the body */
/* It's a trick that I learned from these guys (https://www.youtube.com/@keyframers/videos) and have been abusing ever since */
body>section {
  grid-area: 1 / 1;
}

#score-section {
  display: grid;
  place-content: center;
}

#score {
  font-size: 10rem;
  /* Too lazy too pick a lch one */
  color: rgba(128, 128, 128, 0.555);
  /* We could also make the bubbles spawn in a bubble section and place it in the middle in the html but Â¯\_(ãƒ„)_/Â¯  */
  z-index: -1;
}

#controls-section {
  display: grid;
  /* Keep in mind that logical properties exist and that you might want to use those in some cases */
  /* https://web.dev/learn/css/logical-properties/ */
  padding-bottom: 5vmin;
  align-content: flex-end;
  justify-content: center;
}

#controls {
  width: 90vmin;
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  /* Too lazy too pick a lch one */
  background: rgba(255, 236, 253, 0.747);
  /* Too lazy too pick a lch one */
  border: solid 1px rgba(128, 128, 128, 0.555);
  border-radius: 5px;
}

#controls i {
  display: flex;
  place-content: center;
  font-size: 1.1rem;
  /* Too lazy too pick a lch one */
  color: rgba(128, 128, 128, 0.555);
  padding: 10px;
  cursor: pointer;
}

.bubble {
  position: absolute;
  border-radius: 300px;
  /* Too lazy too pick a lch one */
  background: rgba(255, 166, 0, 0.6);
  opacity: 0;
  animation: ascend 8s forwards;
  filter: hue-rotate(0deg);
}

@keyframes ascend {
  to {
    opacity: 1;
    filter: hue-rotate(720deg);
    /* !!!!!!!!THIS IS ONE IS IMPORTANT!!!!!!!! */
    /* If you're going to animate the position of elements use transform instead of the position properties */
    /* Using the position ones causes a lot more layout computations */
    /* You can check this out in the performance tab or quickly in the rendering tab in chrome */
    /* Position property one: 144ish(and I have a 144hertz monitor, how weird is that?ðŸ¤”) layout calculations per second */
    /* VS */
    /* Transform translate: 4-8 and only going up to 10 when you pop a lot of bubbles */
    /* https://web.dev/animations-guide/ */
    /* https://web.dev/animations-overview/ */
    translate: var(--x-translation) -100vh;
  }
}